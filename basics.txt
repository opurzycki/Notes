TIP: HTML stands for Hypertext Markup Language
'''
	<h1> I'm a header! </h1>
	<h2> I'm another header! </h2>
	<h3 style="color:red"> I'm a coloured (red) header! And I got an inline style! </h3>

	<p> I'm a paragraph! </p>

	<!-- I'm a comment -->
'''
TIP: CSS stands for Cascading Style Sheets

This is plain style element:

	<style>
	</style>

Create some CSS selector!

	<style>
	  h2 {
	    color: red;
	  }
	</style>

TIP: You can describe colors using HEX values eg. #000000 for black

Create some class inside your CSS style element!

	<style>
	  .red-text {
	    color: blue;
	  }
	</style>

And apply it to your header!

	<h2 class="red-text"> This is a red header! </h2>

TIP: Note that in your CSS style element, classes should start with a period. In your HTML elements' class declarations, classes shouldn't start with a period.

Let's change some font size!

	h1 {
	  font-size: 30px;
	}

TIP: You can add numbers to headers and paragraphs but you don't have to. If you want to change multiple ones with same style selector just name them equally.

Let's change font family!

	h1 {
	  font-family: Sans-serif;
	}

TIP: You can include multiple attributes within one style selector e.g:

	<style>
	  p {
	    font-size: 30px;
	    font-family: Monospace;
	  }
	</style>

Let's import Lobster font straight from Google!
Just paste this link at top of your code and you can apply Lobster font in style selector!

	<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">

TIP: You can degrade your fonts; that means if one font is unavaiable browser automatically switch to the next font.

Let's see the code for degrading fonts!

	h2 {
    	  font-family: Lobster, Monospace;
  	}

It's time to add some images!
Note that all images need an alt atribute. The text inside an alt attribute is used for screen readers to improve accessibility and is displayed if the image fails to load.

	<img src="https://www.your-image-source.com/your-image.jpg" alt="Author standing on a beach with two 	thumbs up. ">

To resize image create a class within your style selector like this:
	
	<style>
	  .smaller-image {
	    width: 100px;
	  }
	</style>


Let's create some borders around our photo! As always we will use the class, like this:

	<style>
	  .thin-red-border {
	    border-color: red;
	    border-width: 5px;
	    border-style: solid;
	  }
	</style>

TIP: To create round border use attribute eg. border-radius: 10px

TIP: To create rounded border use border-radius: 50%

TIP: You can apply multiple classes to an element by separating each class with a space within its class attribute. For example:
	<img class="class1 class2 class3">


Anchor elements (a elements) are used to link to content outside of the current page.
Syntax for an exemplary element within the paragraph:

	<p> Here's a
	  <a href='https://github.com/opurzycki/'>
	    link to my GitHub profile
	  </a>
	  for you to follow.</p>


And plain syntax!
	
	<a href='link address'> hypertext </a>

TIP: If you don't want add an a element but you don't know yet where it'll link you can always create a dead link.
     Just replace value of href attribute with a # symbol. eg. 
	
	<a href="#"> dead link </a>

Photo can also link to other pages!
Just nest it inside of an a element like that (it's dead though):

	<a href="#"><img src="your link goes here" alt="link description"></a>


It's time to create some unordered or bullet point-style lists.
Look at the code below:

	<ul>
	  <li>oatmeal</li>
	  <li>bananas</li>
	  <li>yoghurt</li>
	</ul>

And ordered lists:

	<ol>
	  <li>Michael Jordan</li>
	  <li>Kobe Bryant</li>
	  <li>LeBron James</li>
	</ol>

Let's create a web form!
It's great way to get some input from user.

	<input type="text">

Note that input elements are self-closing.

Placeholder text is what appears in text input before user has input anuthing.
You can create placeholder like so:

	<input type="text" placeholder="this is placeholder text">


Want to create web form that submit data to a server? Nothing has been easier!

	<form action="/url-where-you-want-to-submit-form-data></form>

 
You could use some submit button don't you?

	<button type="submit">this button submits the form</button>

Well, you got your form with input text field and Submit button. But what if someone will submit empty field? Nah, we don't want it at all. So let's make our text input required!

	<input type="text" required>

It's time for some radio buttons! They are type of input and should be nested within it's own label element. All related radio buttons should have same name attribute. Let's take a look at an example below:

	<label><input type="radio" name="indoor-outdoor> Indoor</label>
	<label><input type="radio" name="indoor-outdoor> Outdoor</label>

Another similiar form type is checkbox. Give it a try!

	<label><input type="checkbox" name="personality"> Loving</label>

Do you want your checkboxes/radios to be checked by default? Nothing easier! Just add checked attribute!

	<label><input type="checkbox" name="personality" checked> Loving</label>


Shh! It's the div element! It's like the mos commonly used HTML element of all. It's like container for other elements. For instance you can pass the CSS class declaration for all of elements in a single container. Just put some stuff inside that divs!

	<div>
	</div>

For example to create silver background for a 2 ordered lists:

	<style>
	  .silver-background {
	    background-color: silver;
	  }
	</style>

	<div class="silver-background">
	  <ol>
	    <li>Bill Evans</li>
	    <li>Chet Baker</li>
	  </ol>
	</div>


You should give your elements an id attribute. It helps later with JS and you can style your elements using CSS based on them id!
To reference in style element to an id always put a # symbol  in front of their names.

	#your-element {
	  background-color: green;
	}

	<form id="your element">
	</form>


	
Let's see some more CSS style element's. 

Content - The content of the box, where text and images appear
Padding - Clears an area around the content. The padding is transparent
Border - A border that goes around the padding and content
Margin - Clears an area outside the border. The margin is transparent

Beside content element, the rest of them you can describe like that:

	<style>
	  .box {
	    padding-top: 10px;
	    padding-right: 20px;
	    padding-bottom: 30px;
	    padding-left: 40px;
	  }
	</style>

Or the siple way (clockwise notation):

	<style>
	  .box {
	    padding: 10px 20px 30px 40px;
	  }
	</style>

Though we cannot see it, all elements are nested within body element. We can style our body element like any other element and all other elements will inherit our body element's styles.

TIP: classes will override body element's CSS and id elements will override class declarations and in-line elements will override all the CSS declarations in style element

TIP: when you have many styles, or CSS libraries and want to be sure which color or style will be used just use !important attribute. This attribute will override all other CSS

	<style>
	  .green-text {
	    color: green !important;
	  }
	</style>













